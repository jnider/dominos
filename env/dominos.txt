December 1, 2013
Gernot Heiser came to visit us a couple of weeks ago, so I had the chance to ask him
some good questions. First, I had some wrong impressions about the seL4 kernel. I
originally understood that it was minimized to the point of trivial usefulness for the
purpose of easing the verification effort. Gernot has explained that this is not the
case, and in fact the seL4 kernel is a production-quality kernel and the interface is
quite usable. I will have to find the examples of how to use it, and compare it again
the the X.2v6 API that I recently selected. It is possible that I will return to seL4
once I understand better how to use it (or possibly some hybrid). Another interesting
point that he made was that parameters don't need to be passed in registers when
performing IPC. He said that the performance gains were minimal (as opposed to leaving
the parameters in the stack) and complicated the code more than necessary. I am now
revisiting my kernel calls to simplify them a bit. I still have a question about if
this is secure. In a call such as getKIP() which passes a pointer, how can the kernel
determine if the address of the pointer is valid? Could a user modify the pointer
such as to trick the kernel into returning a value into a chosen location? I hope not.

October 27, 2013
Thanks to some Russian hacker site, I have discovered how to build Bochs 2.6.2. It
wouldn't link because of the pthread library. The solution is to configure like this:
./configure LDFLAGS=-pthread --enable-debugger
The answer was here: http://www.linux.org.ru/forum/development/7934916

October 23, 2013
A year later. What have I done? I decided to stick to the X.2v6 L4 API documentation.
I started to implement the kernel API using the SYSENTER method on x86. It's progressing
not badly. I have also implemented the KIP, and the corresponding system call. I am
almost at the point that I can read an elf file and load it from user space. That is my
current goal. Of course I have to fix many bugs along the way. The build system has been
improved, but there are still some outstanding problems. For example, debug information
is no longer being included in the kernel image. It is present in the individual .o
files, which leads me to believe there is a problem with the linker script that is 
throwing away all the debug info. I have tried to include it back explicitly, but no
success so far. User-space printf is still problematic. It was working great for so long
and then it started to act strangely yesterday. When I print a hex number it prints an
unending string of '3's. No idea why '3' or why it never stops. I tried to use GDB +
QEMU for debugging, and it was a ridiculously convoluted process. First, it was not
clear how to connect gdb to qemu, which I eventually figured out (target remote command
from inside gdb + gdbserver command from inside the qemu monitor) but then the gdb
command set was completely non-intuitive (what else would you expect from GNU) and worse
I couldn't even find some simple commands to do what I wanted (step into a function
while single stepping, print the contents of a memory location, etc). I'm sure there is
a way to do these things, but they are so basic, I don't understand why the commands are
so hard to find. So it's back to BOCHS for now, which has given me better results for
debugging.

October 10, 2012
Making progress on root task and boot task.  I had to implement memory allocation inside
the kernel - borrowed from KOS.  I looked at the fiasco implementation, and their 'task'
and 'thread' are separate entities, whereas they were one entity in KOS.  This all comes
down to the way threads are implemented.  I want to have user-space threads, meaning a
single task must split its timeslice between all its own threads.  I don't like this
idea of each thread being equal, because it steals time from other apps that may only
have a single thread.  I created the page directory for the root task, and after the
first task switch I now get a page fault (I'm assuming its because there is no stack).
So it looks like I will have to set up at least enough page tables for the stack and
code for the new task in the kernel.  KOS had done this as well, but not very well. Also
it looks like fiasco has the scheduler inside the kernel.  I want to only have task
switching as part of the kernel, so we'll see how that turns out.  Scheduler implies
policy, and policy should be outside the kernel.  I haven't investigated this too much
yet though, so for now its just thoughts for the future.

October 4, 2012
apt-get install exuberant-ctags

October 2, 2012
I started the JOEL4 kernel from scratch, and then copied over certain files from KOS to
get things going a bit faster.  It now boots!  I can even get to userspace, even though
it doesn't do anything once it gets there.  Now I can concentrate on how to bring up the
rest of the system.  I know the components I need, just have to figure out how to put
them all together.  I want this system to be flexible, so I can boot from a CD or HD or
USB etc. and of course from different file systems.  I know I can replace the media
driver and file system driver to be able to handle every case, so I want to package those
in an initial file like initrd on linux or whatever they are calling it these days.  I
saw they are using the cpio format, which is like tar but simpler.  I think I will use
that as well, since it looks like it answers all of my needs as well.  So the hard part
now is figuring out how to start loading userspace applications.  Assuming I can load
all the modules into memory with the bootloader (which still isn't working by the way)
I have to figure out how to give each one its own memory space.  Obviously I will use
the kernel API's for that, but who is going to call them?  I need some kind of loader.
And I have been down this road before with KOS, and got a bit stuck with mapping page
tables automatically for new tasks.  I hope it will go smoother this time.
On the positive side, I borrowed the serial port driver from syslinux, and it worked
almost immediately.  I had to make one small change to the order of the outb()
parameters, and then it just worked.  So I now have a decent level of visibility into
my kernel, and I'm ready to start implementing some higher functionality.

Sept 25, 2012
Tried to use the sel4 kernel from OK labs to save time.  It doesn't boot right, so I
have to find another solution.  I found one of my old KOS kernels, and it booted right
away using the same boot loader (SYSLINUX+mboot.c32) so I know my script, image, method
etc are correct.  I then tried Fiasco.OC and was able to boot that one too, so there is
definately a problem with the sel4 build I'm using.  Anyway, we're almost set up to be
able to use 3 different kernels interchangably.

Sept 13, 2012
One more problem.  I found out that if I perform the above steps, the kernel does not
automatically recognize the partitions and create /dev/loop0p1 for me.  I also found
out several kernel patches have been proposed, and none have yet been accepted for
some reason.  At least partx does the job, and has been added to the script.  And
now Virtualbox is up to 4.1.22, and we're running on Windows 7.

Sept 10, 2012
I tried a million ways to use parted, fdisk, cfdisk, sfdisk to make a simple boot disk.
These tools have frustrated me to no end, and still I did not succeed.  In the end, the
solution was simple: use the gnome tool "disk utility" to partition the disk as I wanted,
and then copy the mbr to a 512-byte binary file.  Now each time I wish to reproduce the
image, I create the empty file, use the loop dev to make it into a disk, and use dd to copy
the prepared mbr into it.  Now it is just a matter of using "mkdosfs" to format the
partition, then using syslinux to put a boot loader on it.  Now it is all wrapped up in a
convenient script 'makeimage.sh' which performs all of these steps, and additionally puts
the kernel, and creates an iso image ready for booting from a CD.

August 16, 2012
Build the system
Using virtualbox VirtualBox-4.1.18-78361-Win.exe on windows XP
Downloaded &installed the virtualbox extension pack
Installed ubuntu-12.04-desktop-i386.iso
Installed 'git' with: sudo apt-get install git
set up .gitconfig
git config --global user.name "Joel Nider"
git config --global user.email "joel@xxx"

